var should = require('should');
var fs = require('fs');
var path = require('path');

require('./fixture');

var bonesTest = require('bones-test');
var server = bonesTest.server();

// Test config.
var config = server.plugin.config;
config.stash = path.resolve(require.resolve('./fixture'), '../');

// Test data.
var data = {
    scheme: 'http',
    domain: 'example.com',
    ip: '127.0.0.1',
    page: '/',
    code: [301],
    text: 'test text',
    timeout: 5
};

describe('Check', function() {
    // Model.
    bonesTest.testModel(server, 'Check');

    // CRUD.
    bonesTest.testModelCRUD(server, 'Check', data, {
        text: 'some new text'
    });
    bonesTest.testModelCRUDHTTP(server, 'Check', data, {
        text: 'some new text'
    });

    var model = server.plugin.models['Check'];

    // Validate.
    describe('Validate', function() {
        it('should return nothing with the right data', function(done) {
            should.not.exist(new model().validate(data));
            setTimeout(done, 1);
        });

        it('should return the error with no scheme', function(done) {
            var error = new model().validate({});
            error.should.be.a('object');
            error.should.have.property('message', 'Scheme is required');
            setTimeout(done, 1);
        });

        it('should return the error with no domain', function(done) {
            var error = new model().validate({
                scheme: 'http'
            });
            error.should.be.a('object');
            error.should.have.property('message', 'Domain is required');
            setTimeout(done, 1);
        });
    });
    
    // custom functions
    describe('SetFromUrl', function() {
        var testModel = new model();

        it('should return the error for missing URL', function(done) {
            var error = testModel.setFromUrl();
            error.should.be.a('object');
            error.should.have.property('message', 'URL is required');
            setTimeout(done, 1);
        });
        
        it('should return the error for invalid domain', function(done) {
            var error = testModel.setFromUrl('http:///');
            error.should.be.a('object');
            error.should.have.property('message', 'Invalid domain');
            setTimeout(done, 1);
        });
        
        it('should set good attributes in the model', function(done) {
            should.not.exist(testModel.setFromUrl('https://awesome.test.com/best_page_ever.html'));
            testModel.get('scheme').should.equal('https');
            testModel.get('domain').should.equal('awesome.test.com');
            testModel.get('page').should.equal('/best_page_ever.html');
            setTimeout(done, 1);
        });
    })

    // Cleanup.
    describe('Remove the lorem stash', function() {
        it('should return no error', function(done) {
            fs.rmdir(path.resolve(config.stash, 'checks'), function(err) {
                should.not.exist(err);
                setTimeout(done, 1);
            });
        });
    });
});
