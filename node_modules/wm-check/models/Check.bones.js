model = models.Document.extend({
    // No default schema.
    schema: {
        id: 'Check',
        type: 'object',
        properties: {
            scheme: {
                title: 'Scheme',
                type: 'string',
                enum: ['http', 'https'],
                required: true,
                public: true
            },
            domain: {
                title: 'Domain',
                type: 'string',
                required: true,
                public: true
            },
            ip: {
                title: 'IP Address',
                type: 'string',
                required: false,
                public: true
            },
            page: {
                title: 'Page',
                type: 'string',
                required: true,
                default: '/',
                public: true
            },
            code: {
                title: 'Code',
                type: 'array',
                items: {
                    type: 'integer'
                },
                required: true,
                default: [ 200 ],
                public: true
            },
            text: {
                title: 'Text',
                type: 'string',
                required: true,
                public: true
            },
            timeout: {
                title: 'Timeout',
                type: 'integer',
                required: false,
                public: true
            },
            frequency: {
                title: 'Frequency',
                type: 'integer',
                required: true,
                default: 5,
                public: true
            },
            sources: {
                title: 'Source',
                type: 'array',
                required: false,
                public: false,
                items: {
                    type: 'object',
                    properties: {
                        continent_code: {
                            title: 'Continent Code',
                            type: 'string',
                            required: true
                        },
                        country_code: {
                            title: 'Country Code',
                            type: 'string',
                            required: false
                        }
                    }
                }
            }
        }
    },

    // .
    initialize: function(attributes) {
        this.setID();
    },
    url: function() {
        if (_(this.id).isUndefined()) {
            return '/api/Check';
        }
        return '/api/Check/' + encodeURIComponent(this.id);
    },
    setID: function() {
        if (!this.id && this.has('scheme') && this.has('domain') && this.has('page')) {
            this.set({
                id: this.buildID(this.get('scheme'), this.get('domain'), this.get('page'))
            }, {
                silent: true
            });
        }
        return this.id;
    },
    // TODO: escape bad characters.
    buildID: function(scheme, domain, page) {
        var id = scheme +'://'+ domain + page;
        return id.toLowerCase().replace(/ +/g, '_').replace(/[^_\w]/g, '');
    },
    // Convert input URL to a properly split object used in the model
    // TODO: strong validation of the domain / scheme / page format
    setFromUrl: function(url) {
        if (!url) return new Error('URL is required');
        
        // consider http scheme as default
        var schemeIdx = url.indexOf('://');
        if (schemeIdx === -1) {
            var scheme = 'http'
        } else {
            var scheme = url.substr(0, schemeIdx)
            url = url.substr(schemeIdx + 3);
        }
        
        var domainIdx = url.indexOf('/');
        if (domainIdx === -1) {
            var domain = url,
                page = '/';
        } else {
            var domain = url.substr(0, domainIdx),
                page = url.substr(domainIdx);
        }
        
        // Errors
        if (!domain) return new Error('Invalid domain');
        
        this.set({
            scheme: scheme,
            domain: domain,
            page: page
        }, {
            silent: true
        });
    },
    // clean private attribute from the model for public display
    clean: function() {
        for (attr in this.attributes) {
            // remove anything not defined in the schema
            if (!this.schema[attr]) {
                this.unset(attr);
            } else if (!this.schema[attr].public) {
                this.unset(attr);
            }
        }
        return this;
    }
});

// .
model.augment({
    // Validate.
    // TODO
    validate: function(parent, attr) {
        // Name is required.
        if (!attr.scheme) return new Error('Scheme is required');
        if (!attr.domain) return new Error('Domain is required');

        var error = (parent && parent.call(this, attr));
        if (error) {
            return new Error(error instanceof Object ? error.message : error);
        }
    }
});