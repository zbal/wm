models.Report.prototype.sync = function(method, model, options) {
    var success = options.success, error = options.error;

    // No write operations
    if (method !== 'read') {
        return error(new Error('Method not allowed'));
    }

    this.getReport({
        success: function(report) {
            return success({report: report});
        },
        error: function(err) {
            return error(err);
        },
    });
};

// Save query param in model for processing in reports
models.Report.prototype.initialize = function(attr, query) {
    this.query = query;
}

// Depending on the query parameters - provide various reports
// TODO:
//  - rely on MongoDB views instead
models.Report.prototype.getReport = function(options) {
    var success = options.success, error = options.error;
    
    // Various reports
    switch (this.query.type) {
        case "geo":
            this.getGeoReport(options); 
            break;
        case "time":
            this.getTimeReport(options); 
            break;
        default: 
            return error(new Error('Invalid parameters'));
    }
}

// Geo report - do stuff
models.Report.prototype.getGeoReport = function(options) {
    var success = options.success, error = options.error;
    
    // Fake error
    if (this.query.error === 'true') {
        return error(new Error('Error during report generation.'))
    }
    
    var report = {
        type: 'geoReport',
        geo1: 'awesome',
        geo2: 'great'
    }
    
    return success(report);
}

// Time report - do other stuff
models.Report.prototype.getTimeReport = function(options) {
    var success = options.success, error = options.error;

    // Fake error
    if (this.query.error === 'true') {
        return error(new Error('Error during report generation.'))
    }
    
    var report = {
        type: 'timeReport',
        time1: 'awesome',
        time2: 'great'
    }
    
    return success(report);
}
