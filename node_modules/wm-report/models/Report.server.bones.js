models.Report.prototype.sync = function(method, model, options) {
    var success = options.success, error = options.error;

    // No write operations
    if (method !== 'read') {
        return error(new Error('Method not allowed'));
    }
    
    this.getReport({
        success: function(report) {
            return success({report: report});
        },
        error: function(err) {
            return error(err);
        },
    });
};

// Save query param in model for processing in reports
models.Report.prototype.initialize = function(attr, query) {
    this.query = query;
}

// Depending on the query parameters - provide various reports
// TODO:
//  - rely on MongoDB views instead
models.Report.prototype.getReport = function(options) {
    var success = options.success, error = options.error;
    
    // Valid reports only
    var validReports = [
        'check',
        'node'
    ];
    if (_.indexOf(validReports, this.get('id')) === -1) {
        return error(new Error('Invalid report type'))
    }
    
    // Various reports
    switch (this.get('id')) {
        case "check":
            this.getCheckReport(options); 
            break;
        case "node":
            this.getNodeReport(options); 
            break;
        default: 
            return success({});
    }
}

// Geo report - do stuff
models.Report.prototype.getCheckReport = function(options) {
    var success = options.success, error = options.error;
    
    if (!this.query.id) return error(new Error('Missing parameters'));

    var records = new Bones.plugin.models.Records();
    records.fetch();

    // Filter By Node
    records = records.filterByCheck(this.query.id);

    // Filter By Date
    if (this.query.from || this.query.to) {
        records = records.filterByDate(this.query.from, this.query.to);
    }
    
    // TODO
    var report = {
        records: records,
        summary: {
            count: {
                total: records.length,
                success: records.length,
                error: 0
            },
            avg: {
                total: 2,
                dns: 1,
                retrieve: 1 
            }
        }
    }
    
    // Filter verbosity
    if (this.query.type !== 'full') {
        delete report.records;
    }
    
    return success(report);
}

// Time report - do other stuff
models.Report.prototype.getNodeReport = function(options) {
    var success = options.success, error = options.error;
    
    if (!this.query.id) return error(new Error('Missing parameters'));

    var records = new Bones.plugin.models.Records();
    records.fetch();

    // Filter By Node
    records = records.filterByNode(this.query.id);

    // Filter By Date
    if (this.query.from || this.query.to) {
        records = records.filterByDate(this.query.from, this.query.to);
    }
    
    // TODO
    var report = {
        records: records,
        summary: {
            count: {
                total: records.length,
                success: records.length,
                error: 0
            },
            avg: {
                total: 2,
                dns: 1,
                retrieve: 1 
            }
        }
    }
    
    // Filter verbosity
    if (this.query.type !== 'full') {
        delete report.records;
    }
    
    return success(report);
}
