models.Schedule.prototype.sync = function(method, model, options) {
    var success = options.success, error = options.error;
    var schedule = this;

    // No write operations
    if (method !== 'read') {
        return error(new Error('Method not allowed'));
    }

    this.getSchedule({
        success: function() {
            return success({schedule: schedule.checks});
        },
        error: function(err) {
            return error(err);
        },
    });
};

models.Schedule.prototype.initialize = function(attr, query) {
    this.checks = [];
}

models.Schedule.prototype.getSchedule = function(options) {
    var success = options.success, error = options.error;

    var schedule = this;
    
    var collection = new Bones.plugin.models.Checks();
    
    collection.fetch();
    var remaining = collection.length;
    
    collection.each(function(check) {
        schedule.getNodes(check, {
            success: function(list) {
                // add the check in the checks list
                if (list.where({id: schedule.get('id')}).length > 0) {
                    schedule.checks.push(check.clean());
                }
                if (--remaining === 0) return success();
            }
        })
    });
}

// Get the suitable nodes for a specific check
models.Schedule.prototype.getNodes = function(check, options) {
    var success = options.success, error = options.error;
    
    // TODO:
    //  - select nodes based on other constraints than only the location
    
    if (!check) return error(new Error('Check is required'));
    if (!_.isFunction(check.get)) return error(new Error('Invalid Check model'));
    
    var nodes = new Bones.plugin.models.Nodes();
    nodes.fetch({
        success: function() {
            if (!check.get('sources')) {
                // TODO: filter by node status
                return success(nodes);
            }
            
            var suitableNodes = nodes.filterByLocations(check.get('sources'));
            return success(suitableNodes);
        },
        error: function(collection, err) {
            return error(err);
        }
    });
    
}

