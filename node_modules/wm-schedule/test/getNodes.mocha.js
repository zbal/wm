var should = require('should');
var fs = require('fs');
var path = require('path');

require('./fixture');

var bonesTest = require('bones-test');
var server = bonesTest.server();

// Test config.
var config = server.plugin.config;
config.stash = path.resolve(require.resolve('./fixture'), '../');

var node_data1 = {
    id: 'node1',
    ip: '1.1.1.1',
    public_key: 'aaa',
    continent_code: 'AS',
    country_code: 'CN',
    status: 'enabled'
}

var node_data2 = {
    id: 'node2',
    ip: '1.1.1.1',
    public_key: 'aaa',
    continent_code: 'AS',
    country_code: 'TW',
    status: 'disabled'
}

describe('Nodes creation', function() {
    var model = server.plugin.models['Node'];

    var node1 = new model();
    var node2 = new model();

    // Prepare collection
    it('should save the 1st node', function(done) {
        node1.save(node_data1, {
            success: function() {
                setTimeout(done, 1);
            },
            error: function() {
                should.fail('No error expected on node save');
                setTimeout(done, 1);
            }
        });
    });
    it('should save the 2nd node', function(done) {
        node2.save(node_data2, {
            success: function() {
                setTimeout(done, 1);
            },
            error: function() {
                should.fail('No error expected on node save');
                setTimeout(done, 1);
            }
        });
    });
});

// Test data.
var data_check1 = {
    scheme: 'http',
    domain: 'example.com',
    page: '/',
    sources: [{
        continent_code: 'AS',
        country_code: 'TW'
    }]
};
var data_check2 = {
    scheme: 'http',
    domain: 'example.com',
    page: '/',
    sources: [{
        continent_code: 'AS'
    }]
};
var data_check3 = {
    scheme: 'http',
    domain: 'example.com',
    page: '/',
    sources: [{
        continent_code: 'AS',
        country_code: 'TW'
    },
    {
        continent_code: 'AS',
        country_code: 'CN'
    }]
};


describe('Suitable nodes', function() {
    var Check = server.plugin.models['Check'];
    var check1 = new Check(data_check1);
    var check2 = new Check(data_check2);
    var check3 = new Check(data_check3);
    
    var model = server.plugin.models['Schedule'];

    it('should error because no check provided', function(done) {
        var schedule = new model();
        schedule.getNodes(null, {
            success: function(nodes) {
                should.fail('no success expected.');
                setTimeout(done, 1);
            },
            error: function(err) {
                err.should.be.a('object');
                err.should.have.property('message', 'Check is required');
                setTimeout(done, 1);
            }
        });
    });

    it('should error because no valid check model provided', function(done) {
        var schedule = new model();
        schedule.getNodes({}, {
            success: function(nodes) {
                should.fail('no success expected.');
                setTimeout(done, 1);
            },
            error: function(err) {
                err.should.be.a('object');
                err.should.have.property('message', 'Invalid Check model');
                setTimeout(done, 1);
            }
        });
    });

    it('should return 1 suitable node for check1 - 1 country', function(done) {
        var schedule = new model();
        schedule.getNodes(check1, {
            success: function(nodes) {
                nodes.length.should.equal(1);
                nodes.models[0].get('id').should.equal('node2');
                setTimeout(done, 1);
            },
            error: function(err) {
                should.fail('no error expected.');
                setTimeout(done, 1);
            }
        });
    });

    it('should return 2 suitable nodes for check2 - 1 continent', function(done) {
        var schedule = new model();
        schedule.getNodes(check2, {
            success: function(nodes) {
                nodes.length.should.equal(2);
                setTimeout(done, 1);
            },
            error: function(err) {
                should.fail('no error expected.');
                setTimeout(done, 1);
            }
        });
    });

    it('should return 2 suitable nodes for check3 - 2 countries', function(done) {
        var schedule = new model();
        schedule.getNodes(check3, {
            success: function(nodes) {
                nodes.length.should.equal(2);
                setTimeout(done, 1);
            },
            error: function(err) {
                should.fail('no error expected.');
                setTimeout(done, 1);
            }
        })
    });

    describe('Cleanup', function() {
        var model = server.plugin.models['Node'];

        var node1 = new model(node_data1);
        var node2 = new model(node_data2);
        
        it('should destroy the node1', function(done) {
            node1.destroy({
                success: function() {
                    setTimeout(done, 1);
                },
                error: function() {
                    should.fail('Expecting no error');
                    setTimeout(done, 1);
                }
            });
        });
        it('should destroy the node2', function(done) {
            node2.destroy({
                success: function() {
                    setTimeout(done, 1);
                },
                error: function() {
                    should.fail('Expecting no error');
                    setTimeout(done, 1);
                }
            });
        });
    });

    // Cleanup.
    describe('Remove the lorem stash', function() {
        it('should return no error', function(done) {
            fs.rmdir(path.resolve(config.stash, 'nodes'), function(err) {
                should.not.exist(err);
                setTimeout(done, 1);
            });
        });
    });
});
