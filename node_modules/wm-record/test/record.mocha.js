var should = require('should');
var fs = require('fs');
var path = require('path');

require('./fixture');

var bonesTest = require('bones-test');
var server = bonesTest.server();

// Test config.
var config = server.plugin.config;
config.stash = path.resolve(require.resolve('./fixture'), '../');

// Test data.
var data = {
    id: 'lorem',
    check_id: 'check1',
    node_id: 'node1',
};

describe('Check', function() {
    // Model.
    bonesTest.testModel(server, 'Record');

    // CRUD.
    bonesTest.testModelCRUD(server, 'Record', data, {
        status: 'completed'
    });
    bonesTest.testModelCRUDHTTP(server, 'Record', data, {
        status: 'completed'
    });

    var model = server.plugin.models['Record'];

    // Validate.
    describe('Validate', function() {
        it('should return nothing with the right data', function(done) {
            should.not.exist(new model().validate(data));
            setTimeout(done, 1);
        });

        it('should return the error with no scheme', function(done) {
            var error = new model().validate({});
            error.should.be.a('object');
            error.should.have.property('message', 'Node ID is required');
            setTimeout(done, 1);
        });

        it('should return the error with no domain', function(done) {
            var error = new model().validate({
                node_id: 'http'
            });
            error.should.be.a('object');
            error.should.have.property('message', 'Check ID is required');
            setTimeout(done, 1);
        });
    });
    
    // custom functions
    describe('setDefaults', function() {
        var dataTest = {
            check_id: 'check1',
            node_id: 'node1'
        };

        var testModel = new model(dataTest);
    
        it('should create the created_date', function(done) {
            testModel.setDefaults();
            testModel.get('created_date').should.be.a('number');
            setTimeout(done, 1);
        });
        
        it('should save successfully and create the ID accordingly', function(done) {
            testModel.save(null, {
                success: function(_model, res) {
                    _model.get('id').should.be.a('string');
                    _model.get('id').should.equal(_model.get('node_id') +'_'+ _model.get('check_id') +'_'+ _model.get('created_date'));
                    setTimeout(done, 1);
                },
                error: function(_model, err) {
                    should.fail('Expecting no error');
                    setTimeout(done, 1);
                }
            });
        });
        
        it('should destroy the testModel', function(done) {
            testModel.destroy({
                success: function() {
                    setTimeout(done, 1);
                },
                error: function() {
                    should.fail('Expecting no error');
                    setTimeout(done, 1);
                }
            });
        });
    });

    // Cleanup.
    describe('Remove the lorem stash', function() {
        it('should return no error', function(done) {
            fs.rmdir(path.resolve(config.stash, 'records'), function(err) {
                should.not.exist(err);
                setTimeout(done, 1);
            });
        });
    });
});
