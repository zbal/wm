model = models.Document.extend({
    // No default schema.
    schema: {
        id: 'Record',
        type: 'object',
        properties: {
            node_id: {
                title: 'Node ID',
                type: 'string',
                required: true
            },
            check_id: {
                title: 'Check ID',
                type: 'string',
                required: true
            },
            status: {
                title: 'Status',
                type: 'string',
                enum: [ 'waiting', 'completed', 'cancelled' ],
                required: true
            },
            success: {
                title: 'Success',
                type: 'boolean',
                required: false
            },
            error: {
                title: 'Error',
                type: 'string',
                required: false
            },
            time: {
                title: 'Time',
                type: 'integer',
                required: true
            },
            created_date: {
                title: 'Created Date',
                type: 'date',
                required: true
            },
            closed_date: {
                title: 'Closed Date',
                type: 'date',
                required: false
            },
            ip: {
                title: 'IP',
                type: 'string',
                required: false
            },
            size: {
                title: 'Size',
                type: 'integer',
                required: true
            }
        }
    },

    // .
    initialize: function(attributes) {
        this.setID();
    },
    url: function() {
        if (_(this.id).isUndefined()) {
            return '/api/Record';
        }
        return '/api/Record/' + encodeURIComponent(this.id);
    },
    setID: function() {
        if (!this.id && this.has('node_id') && this.has('check_id') && this.has('created_date')) {
            this.set({
                id: this.buildID(this.get('node_id'), this.get('check_id'), this.get('created_date'))
            }, {
                silent: true
            });
        }
        return this.id;
    },
    // TODO: escape bad characters.
    buildID: function(nodeId, checkId, createdDate) {
        var id = nodeId +'_'+ checkId +'_'+ createdDate;
        return id.toLowerCase().replace(/ +/g, '_').replace(/[^_\w]/g, '');
    },
    
    setDefaults: function() {
        if (!this.get('created_date')) {
            this.set({
                created_date: (new Date()).getTime()
            }, {
                silent: true
            });
        }
        
        if (!this.get('status')) {
            this.set({
                status: 'waiting'
            }, {
                silent: true
            });
        }
    }
});

// .
model.augment({
    // Validate.
    // TODO
    validate: function(parent, attr) {
        // Name is required.
        if (!attr.node_id) return new Error('Node ID is required');
        if (!attr.check_id) return new Error('Check ID is required');

        var error = (parent && parent.call(this, attr));
        if (error) {
            return new Error(error instanceof Object ? error.message : error);
        }
    }
});