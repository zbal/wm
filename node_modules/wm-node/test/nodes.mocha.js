var should = require('should');
var fs = require('fs');
var path = require('path');

require('./fixture');

var bonesTest = require('bones-test');
var server = bonesTest.server();

// Test config.
var config = server.plugin.config;
config.stash = path.resolve(require.resolve('./fixture'), '../');

// Test data.
var data = {
    ip: '8.8.8.8',
    public_key: 'aaa'
};

describe('Nodes', function() {
    var model = server.plugin.models['Node'];
    var collection = server.plugin.models['Nodes'];

    var node1 = new model({
        id: 'node1',
        ip: '1.1.1.1',
        public_key: 'aaa',
        continent_code: 'AS',
        country_code: 'CN',
        status: 'enabled'
    });
    var node2 = new model({
        id: 'node2',
        ip: '1.1.1.1',
        public_key: 'aaa',
        continent_code: 'AS',
        country_code: 'TW',
        status: 'disabled'
    });

    // Prepare collection
    describe('Collection creation', function() {
        it('should save the 1st node', function(done) {
            node1.save(null, {
                success: function() {
                    setTimeout(done, 1);
                },
                error: function() {
                    should.fail('No error expected on node save');
                    setTimeout(done, 1);
                }
            });
        });
        it('should save the 2nd node', function(done) {
            node2.save(null, {
                success: function() {
                    setTimeout(done, 1);
                },
                error: function() {
                    should.fail('No error expected on node save');
                    setTimeout(done, 1);
                }
            });
        });
    });
    
    // Filter
    describe('Nodes filtering', function() {
        var nodes = new collection();
        
        it('should return the entire collection', function(done) {
            nodes.fetch({
                success: function() {
                    nodes.length.should.equal(2);
                    setTimeout(done, 1);
                },
                error: function() {
                    should.fail('No error expected on collection fetch');
                    setTimeout(done, 1);
                }
            });
        });
        
        it('should return the entire collection (location)', function(done) {
            var collection = nodes.filterByLocations();
            collection.should.be.a('object');
            collection.length.should.equal(2);
            var collection = nodes.filterByLocations({});
            collection.should.be.a('object');
            collection.length.should.equal(2);
            var collection = nodes.filterByLocations([]);
            collection.should.be.a('object');
            collection.length.should.equal(2);
            setTimeout(done, 1);
        });
        it('should return 0 node in the collection (location)', function(done) {
            var collection = nodes.filterByLocations({
                continent_code: 'NA'
            });
            
            collection.should.be.a('object');
            collection.length.should.equal(0);
            setTimeout(done, 1);
        });
        it('should return 2 nodes in the collection (location)', function(done) {
            var collection = nodes.filterByLocations({
                continent_code: 'AS'
            });
            
            collection.should.be.a('object');
            collection.length.should.equal(2);
            setTimeout(done, 1);
        });
        it('should return 1 node in the collection (location)', function(done) {
            var collection = nodes.filterByLocations({
                continent_code: 'AS',
                country_code: 'TW'
            });
            
            collection.should.be.a('object');
            collection.length.should.equal(1);
            collection[0].get('country_code').should.equal('TW');
            setTimeout(done, 1);
        });
        it('should return 1 node in the collection (status)', function(done) {
            nodes.filterByStatus('enabled').length.should.equal(1);
            setTimeout(done, 1);
        });
        it('should return an empty list of nodes (bad status)', function(done) {
            nodes.filterByStatus(null).length.should.equal(0);
            nodes.filterByStatus('bad').length.should.equal(0);
            setTimeout(done, 1);
        });
    });

    describe('Cleanup', function() {
        it('should destroy the node1', function(done) {
            node1.destroy({
                success: function() {
                    setTimeout(done, 1);
                },
                error: function() {
                    should.fail('Expecting no error');
                    setTimeout(done, 1);
                }
            });
        });
        it('should destroy the node2', function(done) {
            node2.destroy({
                success: function() {
                    setTimeout(done, 1);
                },
                error: function() {
                    should.fail('Expecting no error');
                    setTimeout(done, 1);
                }
            });
        });
    });

    // Cleanup.
    describe('Remove the lorem stash', function() {
        it('should return no error', function(done) {
            fs.rmdir(path.resolve(config.stash, 'nodes'), function(err) {
                should.not.exist(err);
                setTimeout(done, 1);
            });
        });
    });
});
