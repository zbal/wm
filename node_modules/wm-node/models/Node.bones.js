model = models.Document.extend({
    // No default schema.
    schema: {
        id: 'Node',
        type: 'object',
        properties: {
            ip: {
                title: 'IP',
                type: 'string',
                required: true
            },
            status: {
                title: 'Status',
                type: 'string',
                enum: [ 'enabled', 'disabled', 'dead' ],
                required: true
            },
            public_key: {
                title: 'Public Key',
                type: 'string',
                required: true
            },
            continent_code: {
                title: 'Continent Code',
                type: 'string',
                required: false
            },
            country_code: {
                title: 'Country Code',
                type: 'string',
                required: false
            },
            city: {
                title: 'City',
                type: 'string',
                required: false
            },
            ISP: {
                title: 'ISP',
                type: 'string',
                required: false
            },
            bandwidth: {
                title: 'Bandwidth',
                type: 'integer',
                required: false
            },
            created_date: {
                title: 'Created Date',
                type: 'date',
                required: true
            },
            modified_date: {
                title: 'Modified Date',
                type: 'date',
                required: true
            },
            last_report_date: {
                title: 'Last Report Date',
                type: 'date',
                required: false
            }
        }
    },

    // .
    initialize: function(attributes) {
        this.setID();
    },
    url: function() {
        if (_(this.id).isUndefined()) {
            return '/api/Node';
        }
        return '/api/Node/' + encodeURIComponent(this.id);
    },
    setID: function() {
        if (!this.id && this.has('ip')) {
            this.set({
                id: this.buildID(this.get('ip'))
            }, {
                silent: true
            });
        }
        return this.id;
    },
    // TODO: escape bad characters.
    buildID: function(ip) {
        return ip;
    },
    // setDefaults
    setDefaults: function() {
        // Handle dates
        if (!this.get('created_date')) {
            this.set({
                created_date: new Date().getTime()
            }, {
                silent: true
            });
        }

        if (!this.get('status')) {
            this.set({
                status: 'enabled'
            }, {
                silent: true
            });
        }
    }
});

// .
model.augment({
    // Validate.
    // TODO
    validate: function(parent, attr) {
        // Name is required.
        if (!attr.ip) return new Error('IP is required');
        if (!attr.ip.match('[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')) return new Error('Invalid IP format');

        var error = (parent && parent.call(this, attr));
        if (error) {
            return new Error(error instanceof Object ? error.message : error);
        }
    }
});